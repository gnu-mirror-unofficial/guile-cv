@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Guile-CV Reference Manual.
@c Copyright (C) 2016 - 2018 Free Software Foundation, Inc.
@c See the file guile-cv.texi for copying conditions.


@node Introduction
@chapter Introduction

@menu
* About Guile-CV::
@c * Description::
@c * What else::
@c * Savannah::
* Obtaining and Installing Guile-CV::
* Contact::
* Reporting Bugs::
@end menu


@node About Guile-CV
@section About Guile-CV

@strong{GNU Guile-CV} @*
Image Processing and Analysis in @uref{@value{UGUILE}, Guile} @*
a Computer Vision functional programming library


@c @subheading Description

@uref{@value{UGUILE-CV}, Guile-CV} - Image Processing and Analysis in
@uref{@value{UGUILE}, Guile} - is a Computer Vision functional
programming library for the @uref{@value{UGUILE}, Guile} Scheme
language.

@uref{@value{UGUILE-CV}, Guile-CV} is based on @uref{@value{UVIGRA},
Vigra} (Vision with Generic Algorithms), enhanced with additional
algorithms (@code{Image Textures}, @code{Delineate},
@code{Reconstruction} and many more), all accessible through a
@code{nice}, @code{clean} and @code{easy to use} high level @code{API}.

@uref{@value{UGUILE-CV}, Guile-CV} is natively @code{multi-threaded},
and takes advantage of @code{multiple cores}, using high-level and fine
grained application-level @code{parallelism constructs} available in
@uref{@value{UGUILE}, Guile}, based on its support to @code{POSIX
threads}.


@subheading Objective

@uref{@value{UGUILE-CV}, Guile-CV} objective is to be a @code{robust},
@code{reliable} and @code{fast} - Image Processing and Analysis -
Computer Vision functional programming library for the
@uref{@value{UGUILE}, Guile} Scheme language. @uref{@value{UGUILE-CV},
Guile-CV} also wants to be @code{easy to use}, @code{study},
@code{modify} and @code{extend}.

@uref{@value{UGUILE-CV}, Guile-CV} can be used as an @code{educational
sofware}, a @code{research toolbox} but it can also be used @code{'in
production'}: @uref{@value{UGUILE-CV}, Guile-CV} is @code{robust},
@code{reliable} and @code{fast}, and we will make sure
@uref{@value{UGUILE-CV}, Guile-CV} remains @code{robust},
@code{reliable} and @code{fast} as it grows.

@c @subheading What else

@c @uref{@value{UGUILE-CV}, Guile-CV} is almost entirely written in
@c @uref{@value{UGUILE}, Guile} Scheme, though for performance reasons,
@c some basic operations are implemented in C (see libguile-cv if you are
@c interested).  This C code is kept to the very strict minimum and _not_
@c part of the API: as Guile Scheme evolves, targeting an AOT compiler, we
@c may rewrite these in scheme at any moment.


@subheading Savannah

@uref{@value{UGUILE-CV}, Guile-CV} also has a
@uref{@value{UGUILE-CV-SAVANNAH}, Savannah project page}.


@node Obtaining and Installing Guile-CV
@section Obtaining and Installing Guile-CV

@uref{@value{UGUILE-CV}, Guile-CV} can be obtained from the following
archive @uref{@value{UGUILE-CV-RELEASES}, site}.  The file will be named
guile-cv-version.tar.gz. The current version is @value{VERSION}, so the
file you should grab is:

@indentedblock
@uref{@value{UGUILE-CV-LATEST}}
@end indentedblock

@subheading Dependencies

@uref{@value{UGUILE-CV}, Guile-CV} needs the following software to run:

@itemize @bullet

@item
Autoconf >= 2.69
@item
Automake >= 1.14
@item
Makeinfo >= 6.3
@item
@uref{@value{UGUILE}, Guile} >= 2.0.13
@item
@uref{@value{UGUILE-LIB}, Guile-Lib} >= 0.2.5
@item 
@uref{@value{UVIGRA}, Vigra} >= 1.11.0

@indentedblock
@strong{Note:}

If you manually install @uref{@value{UVIGRA}, Vigra}, make sure you pass
the cmake ‑DCMAKE_BUILD_TYPE=RELEASE option, which triggers absolutely
essential adequate runtime optimization flags.
@end indentedblock

@item
@uref{@value{UVIGRAC}, Vigra C} >= commit 245b4ca64 Jan 3, 2018

@indentedblock
Vigra C - a C wrapper [to some of] the Vigra functionality - is
currently only available by cloning its source code @uref{@value{UGIT},
git} repository: there is no release and no versioning scheme
either@footnote{We do our best to check that the libvigra_c installed
library does contain the required Guile-CV functionalty though, and
these checks are listed as part of our @code{configure} steps}.  But no
big deal, its home page has an 'Installation' section which guides you
step by step.

@strong{Notes:}

@enumerate
@item
Make sure you pass the cmake ‑DCMAKE_BUILD_TYPE=RELEASE option, which
triggers absolutely essential adequate runtime optimization flags;

@item
Vigra C says it depends on @code{cmake >= 3.1}, but this is only
true if you want to build its documentation, probably not the case. Most
distribution still have cmake 2.8, if that is your case, you may safely
edit @file{/your/path/vigra_c/CMakeLists.txt} and downgrade this
requirement to the cmake version installed on your machine;

@item
Make sure the directory where @file{libvigra_c.so} has been installed is
'known', either because it is defined in @file{/etc/ld.so.conf.d}, or
you set the environment variable @code{LD_LIBRARY_PATH}, otherwise Guile
won't find it and @code{configure} will report an error.
@end enumerate
@end indentedblock

@item
@uref{@value{ULATEX}, LaTex}

@indentedblock
Any modern latex distribution will do, we use @uref{@value{UTEXLIVE},
TexLive}.

Guile-CV will check that it can find the @code{standalone}
documentclass, as well as the following packages: @code{inputenc},
@code{fontenc}, @code{lmodern}, @code{xcolor}, @code{booktabs},
@code{siunitx}, @code{iwona}.

@uref{@value{UIWONA}, Iwona}: this is the font used to create
@ref{im-histogram} headers, legend indices and footers. Note that it
could be that it is not part of your 'basic' LaTex distro, on debian
for example, iwona is part of the texlive-fonts-extra package.
@end indentedblock

@end itemize


@subheading Install from the tarball

Assuming you have satisfied the dependencies, open a terminal and
proceed with the following steps:

@example
cd <download-path>
tar zxf guile-cv-@value{VERSION}.tar.gz
cd guile-cv-@value{VERSION}
./configure [--prefix=/your/prefix] [--with-guile-site=yes]
make
make install
@end example

@indentedblock
@strong{Special note:}

Before you start to use @uref{@value{UGUILE-CV}, Guile-CV}, make sure
you read and implement the recommendation made in the manual, section
@xref{Configuring Guile for Guile-CV}.
@end indentedblock

Happy @uref{@value{UGUILE-CV}, Guile-CV}!


@subheading Install from the source

@uref{@value{UGUILE-CV}, Guile-CV} uses @uref{@value{UGIT}, Git} for
revision control, hosted on @uref{@value{UGUILE-CV-SAVANNAH}, Savannah},
you may browse the sources repository @uref{@value{UGUILE-CV-GIT}, here}.

There are currently 2 [important] branches: @code{master} and
@code{devel}. @uref{@value{UGUILE-CV}, Guile-CV} stable branch is
master, developments occur on the devel branch.

So, to grab, compile and install from the source, open a terminal and:

@example
git clone git://git.savannah.gnu.org/guile-cv.git
cd guile-cv
./autogen.sh
./configure [--prefix=/your/prefix] [--with-guile-site=yes]
make
make install
@end example

@indentedblock
@strong{Special note:}

Before you start to use @uref{@value{UGUILE-CV}, Guile-CV}, make sure
you read and implement the recommendation made in the manual, section
@xref{Configuring Guile for Guile-CV}.
@end indentedblock

The above steps ensure you're using @uref{@value{UGUILE-CV}, Guile-CV}
bleeding edge @code{stable} version. If you wish to participate to
developments, checkout the @code{devel} branch:

@example
git checkout devel
@end example

Happy @code{hacking!}

@*
@strong{Notes:}


@enumerate
@item
The @code{default} and @code{--prefix} installation locations for source
modules and compiled files (in the absence of
@code{--with-guile-site=yes}) are:

@example
$(datadir)/guile-cv
$(libdir)/guile-cv/guile/$(GUILE_EFFECTIVE_VERSION)/site-ccache
@end example

If you pass @code{--with-guile-site=yes}, these locations become the
Guile site and site-ccache directories, respectively.

The configure step reports these locations as the content of the
@code{sitedir} and @code{siteccachedir} variables, respectivelly the
source modules and compiled files install locations. After installation,
you may consult these variables using pkg-config:

@example
pkg-config guile-cv-1.0 --variable=sitedir
pkg-config guile-cv-1.0 --variable=siteccachedir
@end example

You will need - unless you have used @code{--with-guile-site=yes}, or
unless these locations are already 'known' by Guile - to define or
augment your @code{GUILE_LOAD_PATH} and @code{GUILE_COMPILED_PATH}
environment variables with these locations, respectively (or
@code{%load-path} and @code{%load-compiled-path} at run time if you
prefer@footnote{In this case, you may as well decide to either alter
your @file{$HOME/.guile} personal file, or, if you are working in a
mult-user environmet, you may also opt for a global configuration. In
this case, the file must be named @file{init.scm} and placed it here
(evaluate the following expression in a terminal): @code{guile -c
"(display (%global-site-dir))(newline)"}.}  (See
@uref{@value{UGUILE-ENV-VARS}, Environment Variables} and
@uref{@value{UGUILE-LOAD-PATH}, Load Path} in the Guile Reference
Manual).

@item
Guile-CV also installs its @code{libguile-cv.*} library files, in
@code{$(libdir)}. The configure step reports its location as the content
of the @code{libdir} variable, which depends on on the content of the
@code{prefix} and @code{exec_prefix} variables (also reported). After
nstallation, you may consult these variables using pkg-config:

@example
pkg-config guile-cv-1.0 --variable=prefix
pkg-config guile-cv-1.0 --variable=exec_prefix
pkg-config guile-cv-1.0 --variable=libdir
@end example

You will need - unless the @code{$(libdir)} location is already 'known'
by your system - to either define or augment your
@code{$LD_LIBRARY_PATH} environment variable, or alter the
@file{/etc/ld.so.conf} (or add a file in @file{/etc/ld.so.conf.d}) and
run (as root) @code{ldconfig}, so that Guile-CV finds its
@code{libguile-cv.*} library files@footnote{Contact your administrator
if you opt for the second solution but don't have @code{write}
priviledges on your system.}.
@c @ifhtml
@c @*@*
@c @end ifhtml

@item
To install Guile-CV, you must have write permissions to the default or
@code{$(prefix)} directory and its subdirs, as well as to both Guile's
site and site-ccache directories if @code{--with-guile-site=yes} was
passed.
@ifhtml
@*@*
@end ifhtml

@item
Like for any other GNU Tool Chain compatible software, you may install
the documentation locally using @code{make install-info}, @code{make
install-html} and/or @code{make install-pdf}.
@ifhtml
@*@*
@end ifhtml


@item
Last but not least :), Guile-CV comes with a @code{test-suite}, which we
recommend you to run (especially before @ref{Reporting Bugs}):

@example
make check
@end example
@end enumerate


@node Contact
@section Contact


@subheading Mailing lists

Guile-CV uses the following mailing list:

@itemize @bullet

@item
@value{GUILE-USER} is for general user help and discussion.

@item
@value{GUILE-DEVEL} is used to discuss most aspects of Guile-CV,
including development and enhancement requests.

@c @item
@c @value{GUILE-CV-BUGS} is used for Guile-CV bug reports.

@end itemize

When sending emails to guile-user and/or guile-devel, please use
'Guile-CV: ' to prefix the subject line of any Guile-CV related email,
thanks!


@subheading IRC

Most of the time you can find me on irc, channel @code{#guile},
@code{#guix} and @code{#scheme} on @emph{irc.freenode.net},
@code{#clutter} and @code{#introspection} on @emph{irc.gnome.org}, under
the nickname @strong{daviid}.



@node Reporting Bugs
@section Reporting Bugs

Guile-CV uses the following bug reports mailing list:

@itemize @bullet
@item @value{GUILE-CV-BUGS}
@end itemize

You can (un)subscribe to the bugs report list by following instructions
on the @uref{@value{UGUILE-CV-BUGS-LISTINFO}, list information page}.

