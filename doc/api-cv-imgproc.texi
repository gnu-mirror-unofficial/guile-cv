@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Guile-CV Reference Manual.
@c Copyright (C) 2016 - 2017 Free Software Foundation, Inc.
@c See the file guile-cv.texi for copying conditions.


@node Processing
@subsection Processing

The Guile-CV procedures and methods to process images.

@subheading Procedures

@ifhtml
@indentedblock
@table @code
@item @ref{im-resize}
@item @ref{im-resize-channel}
@item @ref{im-rotate}
@item @ref{im-rotate-channel}
@item @ref{im-flip}
@item @ref{im-flip-channel}
@item @ref{im-invert}
@item @ref{im-invert-channel}
@item @ref{im-transpose}
@item @ref{im-transpose-channel}
@item @ref{im-normalize}
@item @ref{im-normalize-channel}
@item @ref{im-clip}
@item @ref{im-clip-channel}
@item @ref{im-crop}
@item @ref{im-crop-channel}
@item @ref{im-crop-size}
@item @ref{im-padd}
@item @ref{im-padd-channel}
@item @ref{im-padd-size}
@item @ref{im-rgba->rgb}
@item @ref{im-rgba->gray}
@item @ref{im-rgb->gray}
@item @ref{im-threshold}
@item @ref{im-add}
@item @ref{im-add-channel}
@item @ref{im-subtract}
@item @ref{im-subtract-channel}
@item @ref{im-multiply}
@item @ref{im-multiply-channel}
@item @ref{im-divide}
@item @ref{im-divide-channel}
@item @ref{im-range}
@item @ref{im-range-channel}
@item @ref{im-min}
@item @ref{im-min-channel}
@item @ref{im-max}
@item @ref{im-max-channel}
@item @ref{im-map}
@item @ref{im-map-channel}
@item @ref{im-reduce}
@item @ref{im-reduce-channel}
@item @ref{im-and}
@item @ref{im-or}
@item @ref{im-xor}
@item @ref{im-complement}
@item @ref{im-scrap}
@item @ref{im-particles}
@item @ref{im-particle-clean}
@end table
@end indentedblock
@end ifhtml


@anchor{im-resize}
@anchor{im-resize-channel}
@deffn Procedure im-resize image new-width new-height @
       [#:i-mode 'bilinear]
@deffnx Procedure im-resize-channel channel width height new-width new-height @
        [#:i-mode 'bilinear]

Returns a new image or chanbnel resized to @var{new-width},
@var{new-height}.

The interpolation mode @var{#:i-mode}, can be one of:

@indentedblock
@table @code
@item none
@item bilinear
@item biquadratic
@item bicubic
@item ? (fixme) 
@end table
@end indentedblock
@end deffn


@anchor{im-rotate}
@anchor{im-rotate-channel}
@deffn Procedure im-rotate image angle [#:i-mode 'bilinear]
@deffnx Procedure im-rotate-channel channel width height angle @
        [#:i-mode 'bilinear]

Returns a new image or channel rotated by @var{angle}.

The @var{angle} is in degrees: @code{+/-[0.0 360.0]}.

It is neccessary, for rotations other than multiples of 90Â°, to
recalculate the target coordinates, since after the rotation, they might
be floats.  The 'next neighbor' interpolation possible modes,
@var{#:i-mode}, are:

@indentedblock
@table @code
@item bilinear
@item biquadratic
@item bicubic
@item ? (fixme)
@end table
@end indentedblock
@end deffn


@anchor{im-flip}
@anchor{im-flip-channel}
@deffn Procedure im-flip image plane
@deffnx Procedure im-flip-channel channel width height plane

Returns a new image or channel flipped according to the selected
@var{plane}.

Valid flipping @var{plane} values are:

@indentedblock
@table @code
@item hori horizontal
@item vert vertical
@item both
@end table
@end indentedblock
@end deffn


@anchor{im-invert}
@anchor{im-invert-channel}
@deffn Procedure im-invert image
@deffnx Procedure im-invert-channel channel width height

Returns a new inversed image or channel.

Calculating the inverse of an @var{image} or a @var{channel} consist of
applying the exponent function, @code{expt}, to all pixel values,
raising them to the power of -1.
@end deffn


@anchor{im-transpose}
@anchor{im-transpose-channel}
@deffn Procedure im-transpose image
@deffnx Procedure im-transpose-channel channel width height

Returns a new tranposed image or channel.

Transposing an @var{image} or a @var{channel} consist of flipping it
over its main diagonal.  In the transposed result, switched in size, row
values are the original column values and column values are the original
row values.
@end deffn


@anchor{im-normalize}
@anchor{im-normalize-channel}
@deffn Procedure im-normalize image [#:value 255.0]
@deffnx Procedure im-normalize-channel channel width height [#:value 255.0]

Returns a new normalized image or channel.

Normalizing an @var{image} or a @var{channel} consist of dividing all
pixels by a value so they all fall in the @code{[0.0 -> 1.0]} range. The
default @var{#:value} is @code{255.0}.
@end deffn


@anchor{im-clip}
@anchor{im-clip-channel}
@deffn Procedure im-clip image [#:lower 0.0] [#:upper 255.0]
@deffnx Procedure im-clip-channel channel width height [#:lower 0.0] [#:upper 255.0]

Returns a new clipped image or channel.

Clipping an @var{image} or a @var{channel} consist of replacing all
pixel values below @code{lower} by the @code{lower} value and all pixel
values above @code{upper} by the @code{upper} value.
@end deffn


@anchor{im-crop}
@anchor{im-crop-channel}
@deffn Procedure im-crop image left top right bottom
@deffnx Procedure im-crop-channel channel width height left top right bottom @
        [#:new-w #f] [#:new-h #f]

Returns a new image, resulting of the crop of @var{image} at @var{left},
@var{top}, @var{right} and @var{bottom}.
@end deffn


@anchor{im-crop-size}
@deffn Procedure im-crop-size width height left top right bottom

Returns a list, @code{(new-width new-height)}.

Given the original image @var{width} and @var{height}, this procedure
checks that @var{left}, @var{top}, @var{right} and @var{bottom} are
valid and return a list, @code{(new-width new-height)}, otherwise, it
raises an error.
@end deffn


@anchor{im-padd}
@anchor{im-padd-channel}
@deffn Procedure im-padd image left top right bottom [#:color '(0.0 0.0 0.0)]
@deffnx Procedure im-padd-channel channel width height left top right bottom @
        [#:new-w #f] [#:new-h #f] [#:value 0.0]

Returns a new image or channel, respectively padding @var{image} or
@var{channel} by @var{left}, @var{top}, @var{right} and @var{bottom}
pixels initialized respectively to @var{color} or @var{value}. Note
that when @code{im-padd} is called upon a @code{GRAY} image,
@var{color} is reduced to its corresponding gray @var{value}:

@lisp
@code{(/ (reduce + 0 color) 3)}
@end lisp
@end deffn


@anchor{im-padd-size}
@deffn Procedure im-padd-size width height left top right bottom

Returns a list, @code{(new-width new-height)}.

Given the original image @var{width} and @var{height}, this procedure
checks that @var{left}, @var{top}, @var{right} and @var{bottom} are
@code{>= 0} and return a list, @code{(new-width new-height)},
otherwise, it raises an error.
@end deffn


@c ;;;
@c ;;; Additional API
@c ;;; (cv adds)
@c ;;;


@anchor{im-rgba->rgb}
@deffn Procedure im-rgba->rgb image [#:bg '(0.0 0.0 0.0)]

Returns a new RGB image.

The RGBA @var{image} channels are first normalized. The new RGB channels
are obtained by applying the following pseudo code algorithm:

@lisp
R = (((1 - Source.A) * BG.R) + (Source.A * Source.R)) * 255.0
G = (((1 - Source.A) * BG.G) + (Source.A * Source.G)) * 255.0
B = (((1 - Source.A) * BG.B) + (Source.A * Source.B)) * 255.0
@end lisp
@end deffn


@anchor{im-rgba->gray}
@deffn Procedure im-rgba->gray image [#:bg '(0.0 0.0 0.0)]

Returns a new GRAY image.

This procedure is implemented as @code{(im-rgb->gray (im-rgba->rgb
image)).}
@end deffn


@anchor{im-rgb->gray}
@deffn Procedure im-rgb->gray image

Returns a new GRAY image.
@end deffn


@anchor{im-threshold}
@deffn Procedure im-threshold image threshold [#:bg 'black]

Returns a new BLACK and WHITE image.

The @var{image} argument can either be a GRAY or an an RGB image, in
which case each pixel is converted to GRAY as it is processed. Valid
@var{#:bg} values are @code{black} (the default) and @code{white}.

Pixels for which the original value is @code{>=} @var{threshold} are set
to 255.0 if @var{#:bg} is @code{'black}, and set to 0.0 if @var{#:bg} is
@code{'white}. The other pixels are set to 0.0 or 255.0 respectively.
@end deffn


@anchor{im-add}
@anchor{im-add-channel}
@deffn Method im-add image val
@deffnx Method im-add i1 i2 i3 @dots{}
@deffnx Method im-add-channel channel width height val
@deffnx Method im-add-channel width height c1 c2 c3 @dots{}

Returns a new image or channel.

Performs the scalar addition of @var{image} with @var{val} or the matrix
addition of @var{i1 i2 i3} @dots{} or @var{c1 c2 c3} @dots{}
respectively.
@end deffn


@anchor{im-subtract}
@anchor{im-subtract-channel}
@deffn Method im-subtract image val
@deffnx Method im-subtract i1 i2 i3 @dots{}
@deffnx Method im-subtract-channel channel width height val
@deffnx Method im-subtract-channel width height c1 c2 c3 @dots{}

Returns a new image or channel.

Performs the scalar subtraction of @var{image} with @var{val} or the
matrix subtraction of @var{i1 i2 i3} @dots{} or @var{c1 c2 c3} @dots{}
respectively.
@end deffn


@anchor{im-multiply}
@anchor{im-multiply-channel}
@deffn Method im-multiply image val
@deffnx Method im-multiply i1 i2 i3 @dots{}
@deffnx Method im-multiply-channel channel width height val
@deffnx Method im-multiply-channel c1 w1 h1 c2 w2 h2 c3 w3 h3 @dots{}

Returns a new image or channel.

Performs the scalar multiplication of @var{image} with @var{val} or the
matrix multiplication of @var{i1 i2 i3} @dots{} or @var{c1 w1 h1 c2 w2
h2 c3 w3 h3} @dots{} recursively.  The number of lines of the next image
must equal the number of columns of the previous intermediate result.
@end deffn


@anchor{im-divide}
@anchor{im-divide-channel}
@deffn Method im-divide image val
@deffnx Method im-divide i1 i2 i3 @dots{}
@deffnx Method im-divide-channel channel width height val
@deffnx Method im-divide-channel c1 w1 h1 c2 w2 h2 c3 w3 h3 @dots{}

Returns a new image or channel.

The scalar method divides each pixel of @var{image} or @var{channel} by
@var{val}.

Technically speaking, there is no such thing as matrix division.
Dividing a matrix by another matrix is an undefined function.  The
closest equivalent is multiplying by the inverse of another matrix.

So, the matrix divide methods performs the linear algebra matrix
multiplication of @var{i1} or @var{c1} by the inverse of @var{i2 i3}
@dots{} or @var{c1 c2 c3} @dots{} recursively.  The number of lines of
the next image must equal the number of columns of the previous
intermediate result.
@end deffn


@anchor{im-range}
@anchor{im-range-channel}
@deffn Procedure im-range image
@deffnx Procedure im-range-channel channel width

Returns a list of six values @code{(min row col max row col)} if
@var{image} is GRAY, and a list of list of these values if @var{image}
is RGB or for any @code{n-chan > 1} images.
@end deffn


@anchor{im-min}
@anchor{im-max}
@anchor{im-min-channel}
@anchor{im-max-channel}
@deffn Procedure im-min image
@deffnx Procedure im-max image
@deffnx Procedure im-min-channel channel width
@deffnx Procedure im-max-channel channel width

Returns three multiple values if @var{image} is GRAY: @code{min row col}
or @code{max row col} respectively.  If @var{image} is RGB or for any
@code{n-chan > 1} images, it returns a list of list of these values.
@end deffn


@anchor{im-map}
@anchor{im-map-channel}
@deffn Procedure im-map proc i1 i2 i3 @dots{}
@deffnx Procedure im-map-channel proc width height c1 c2 c3 @dots{}

Returns a new image or channel.

Apply @var{proc} to each pixel value of each channel of @var{i1} (if
only two arguments are given), or to the corresponding pixel values of
each channels of i1 i2 i3 @dots{} (if more than two arguments are
given).
@end deffn


@anchor{im-reduce}
@anchor{im-reduce-channel}
@deffn Procedure im-reduce image proc default
@deffnx Procedure im-reduce-channel channel proc default

Returns one value if @var{image} is GRAY.  If @var{image} is RGB or for
any @code{n-chan > 1}, it returns a list of values.

If @var{image} is empty, @code{im-reduce} returns @var{default} (this is
the only use for default).  If @var{image} has only one pixel, then the
pixel value is what is returned.  Otherwise, @var{proc} is called on the
pixel values of @var{image}.

Each @var{proc} call is @code{(proc elem prev)}, where @code{elem} is a
pixel value from the channel (the second and subsequent pixel values of
the channel), and @code{prev} is the returned value from the previous
call to @var{proc}. The first pixel value - for each channel - is the
@code{prev} for the first call to @code{proc}.

For example:

@lisp
,use (cv)
(im-load "edx.png")
@print{}
$2 = (128 128 1 (#f32(4.0 26.0 102.0 97.0 58.0 10.0 9.0 21.0 # â¦)))
(im-reduce $2 + 0)
@print{}
$3 = 556197.0
@end lisp

@end deffn


@anchor{im-and}
@anchor{im-or}
@anchor{im-xor}
@deffn Procedure im-and i1 i2 i3 @dots{}
@deffnx Procedure im-or i1 i2 i3 @dots{}
@deffnx Procedure im-xor i1 i2 i3 @dots{}

Returns @var{image} if one argument only, otherwise, it returns a new
image, as the result of computing the logical @code{AND}, @code{OR} or
@code{XOR} of all images.

In the case of @code{AND}, for all positive results, the pixel values
(of each channel) of the new image are set to the one obtained from
@var{i1}, and @code{0.0} otherwise.

In the case of @code{OR}, the pixel values (of each channel) of the new
image are set to the one obtained from @var{i1} when it is @code{> 0.0},
otherwise, they are set to the corresponding pixel mean value of all
other images.

In the case of @code{XOR}, the pixel values (of each channel) of the new
image are set to the value obtained from successively computing
@code{(logior (logand a (- 255 b)) (logand (- 255 a) b))} where @code{a}
would be the previous result and @code{b} the current @code{image} pixel
value, until all images passed in arguments have been
processed@footnote{Note that there is no mathematically valid @code{XOR}
operation on floating points, hence as they are @samp{accessed}, pixel
values are converted to integer, using @code{float->int}, defined in the
@code{(cv support libguile-cv)} module).}.

All images must have the same @code{width}, @code{height} and
@code{n-channel}.

There are, of course, scientific use and examples of images logical
@code{XOR}, and that is why @uref{@value{UGUILE-CV}, Guile-CV} is being
developed for, but let's have a bit of fun here, and see if our
levitating GNU likes apples!

@ifnottex
@image{images/emacs-1,,,emacs-1,png}
@end ifnottex

@c @indentedblock
@c You want to have some fun? @code{:-)}

@c Try @code{(im-xor img-1 igm-2)}, then @code{(im-xor img-1 igm-2 img-2)},
@c the result of which being @code{img-1} (a mathematical proprety of the
@c @code{XOR} operation of course, but its fun to see it @samp{in action}.
@c @end indentedblock
@end deffn


@anchor{im-complement}
@deffn Procedure im-complement image

Returns a new image.

This procedure computes the mathematical complement of @var{image},
which for Guile-CV means that for each pixel of each channel, the new
value is @code{(- 255.0 pixel-value)}.
@end deffn

@anchor{im-scrap}
@deffn Procedure im-scrap image size [#:pred <] [#:con 8] [#:bg 'black] @
                 [exclude-on-edges #f]

Returns a new image.

Scraping an image is the operation of removing objects depending on
their @var{size} (in pixels). When @var{exclude-on-edges} is #t, all
objects that are on any edges are also removed.

The procedure first calls @ref{im-label} using @var{con} and @var{bg},
then calls @ref{im-features}.  The @code{area} feature of each object is
then compared to @var{size} using @var{pred} and the object is removed
if the result is #t.

Note that @var{image} must be a binary image.
@end deffn


@anchor{im-particles}
@deffn Procedure im-particles image features [#:clean #t]
@c @cindex Image split
@cindex Image decompose

Returns a list of images.

Each returned image is a @samp{particle}, which is a subpart of
@var{image} determined by its bounding box, given by the @code{left}
@code{top} @code{right} @code{bottom} values of the corresponding
@samp{entry} in @var{features} (see @ref{im-features} for a complete
description of a feature value list.

When @var{#:clean} is @code{#t}, which is the default,
@ref{im-particle-clean} is called upon each particle (see below for a
description of the expected result).
@end deffn


@anchor{im-particle-clean}
@deffn Procedure im-particle-clean particle

Returns a new image.

Cleaning a @var{particle} (which is an image) means detecting and
removing any object(s) that is(are) not connected to the
@samp{particle} itself.

This procedure is based on the property that in a @samp{particle}, which
is an (sub)image resulting from a @ref{im-crop} based on the bounding
box coordinates as returned by @code{im-features}, there precisely is
one object that, if you call @code{im-features} upon @var{particle},
would have its bounding box coordinates being the entire
@var{particle}. In other words, if you call @code{im-particle-clean}
upon an image that is not a @samp{particle}, the result will just be a
black image.
@end deffn
