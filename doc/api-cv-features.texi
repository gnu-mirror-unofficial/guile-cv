@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Guile-CV Reference Manual.
@c Copyright (C) 2016 - 2017 Free Software Foundation, Inc.
@c See the file guile-cv.texi for copying conditions.


@node Features
@subsection Features

The Guile-CV procedures and methods related to image features.


@subheading Procedures

@ifhtml
@indentedblock
@table @code
@item @ref{im-features}
@c @item @ref{im-features-channel}
@end table
@end indentedblock
@end ifhtml


@anchor{im-features}
@c @anchor{im-features-channel}
@deffn Procedure im-features image l-image [#:n-label #f]
@c @deffnx Procedure im-features-channel channel l-channel width height @
@c         [#:n-label #f]
@cindex Features

Returns a list of features, one list for each labeled object - including
the backgroud - in ascending order: the background always comes first
(since it is labeled @code{0}).

Notes: (a) @var{image} can either be an RGB or a GRAY image; (b)
@var{l-image} is the @samp{corresponding} labeled image; (c) when used,
the @var{#:n-label} optional keyword argument must be the total number
of labeled objects from @var{l-image}.


The GRAY feature list values are:

@indentedblock
@table @code
@item area
The labeled object area in pixel

@item left top right bottom
The coordinates of the @samp{bounding box} labeled object@footnote{Note
that when passed to @ref{im-crop}, @code{right} and @code{bottom} must
be increased by 1: @code{(im-crop image left top (+ right 1) (+ bottom
1))}.}

@item mean-x mean-y
Also sometimes called the @samp{centroid}, these are the average of the
x and y coordinates of all of the pixels in the labeled object. These
two coordinate values are floating points, representing the
@samp{mathematical position} of the mean x and y values of the labeled
object

@item min max mean std-dev
The minimum, maximum, mean and standard gray deviaton labeled object
values

@item major-ev-x major-ev-y minor-ev-x minor-ev-y
Respectively the major and minor @uref{@value{UEIGENV}, eigen vectors}
@code{x} and @code{y} normalized coordinates: @code{(= (sqrt (+ (expt
x 2) (expt y 2))) 1)}

@item major-axis minor-axis
Respectively the major and minor @uref{@value{UEIGENV}, eigen values}

@item center-mass-x center-mass-y
The center of mass @code{x} and @code{y} coordinates

@item perimeter
The labeled object perimeter in pixels

@item skewness kurtosis
Respectively the @uref{@value{USKEWNESS}, skewness} and the
@uref{@value{UKURTOSIS}, kurtosis} of the labeled object

@item circularity aspect-ratio roundness
Respectively the circularity @code{(/ (* 4 %pi area) (expt perimeter
2))}, the aspect ratio @code{(/ major-axis minor-axis)} and the
roundness @code{(/ minor-axis major-axis)} of the labeled object
@end table
@end indentedblock


The RGB feature list values are:

@indentedblock
@table @code
@item area
The labeled object area in pixel

@item left top right bottom
The coordinates of the labeled object (the corresponding GRAY
feature footnote applies here too of course)

@item mean-x mean-y
Also sometimes called the @samp{centroid}, these are the average of the
x and y coordinates of all of the (red green blue) pixels in the labeled
object. These two coordinate values are floating points, representing
the @samp{mathematical position} of the mean x and y values of tha
labeled object

@item min-r min-g min-b max-r max-g max-b mean-r mean-g mean-b std-dev-r std-dev-g std-dev-b
The minimum, maximum, mean and standard deviaton labeled object values of
the red, green and blue channels

@item major-ev-x major-ev-y minor-ev-x minor-ev-y
Respectively the major and minor @uref{@value{UEIGENV}, eigen vectors}
@code{x} and @code{y} normalized coordinates: @code{(= (sqrt (+ (expt
x 2) (expt y 2))) 1)}

@item major-axis minor-axis
Respectively the major and minor @uref{@value{UEIGENV}, eigen values}

@item center-mass-x center-mass-y
The center of mass @code{x} and @code{y} coordinates

@item perimeter
The labeled object perimeter in pixels

@item skewness-r skewness-g skewness-b kurtosis-r kurtosis-g kurtosis-b
Respectively the @uref{@value{USKEWNESS}, skewness} and the
@uref{@value{UKURTOSIS}, kurtosis} labeled object values of the red,
green and blue channels

@item circularity aspect-ratio roundness
Respectively the circularity @code{(/ (* 4 %pi area) (expt perimeter
2))}, the aspect ratio @code{(/ major-axis minor-axis)} and the
roundness @code{(/ minor-axis major-axis)} of the labeled object

@end table
@end indentedblock


Though we did not make it public, Guile-CV has an internal feature
display procedure that you might be interested to (re)use, so here is an
example of a GRAY feature list display:

@lisp
scheme@@(guile-user)> (im-load "pp-17-bf-gray.png")
$2 = (85 95 1 (#f32(0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 # …)))
scheme@@(guile-user)> (im-threshold $2 136)
$3 = (85 95 1 (#f32(0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 # …)))
scheme@@(guile-user)> (im-label $3)
$4 = (85 95 1 (#f32(0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 # …)))
$5 = 1
scheme@@(guile-user)> (im-features $2 $4)
$6 = ((3772 0 0 84 94 43.18716812133789 45.65641403198242 0.0 # …) #)
scheme@@(guile-user)> ((@@@@ (cv features) f-display) (match $6 ((bg a) a)))
@print{}

                   area : 4303
  left top right bottom : 0 0 84 94
          mean-x mean-y :  40.95933  48.17778
           min max mean : 136.00000 255.00000 237.51616
     standard deviation :  20.57977
 major ev x, major ev y :  -0.22380   0.97463
 minor ev x, minor ev y :  -0.97463  -0.22380
 major axis, minor axis :  21.45698  18.44942 (radius)
    center of mass x, y :  40.95933  48.17778
              perimeter : 367.16147
               skewness :  -2.93505
               kurtosis :   8.68352
            circularity :   0.40111
           aspect ratio :   1.16302
              roundness :   0.85983
@end lisp

As we mentioned above, @code{f-diplay} is defined in the @code{(cv
features)} module, but it is not exported: in Guile, calling none
exported procedure (which should not be @samp{abused}) is done using the
syntax @code{@@@@ module-name binding-name}, which in this example
translates to @code{(@@@@ (cv features) f-display)}.

@end deffn
