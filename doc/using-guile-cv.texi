@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Guile-CV Reference Manual.
@c Copyright (C) 2016 - 2020 Free Software Foundation, Inc.
@c See the file guile-cv.texi for copying conditions.


@node Using Guile-CV
@c @chapter Using Guile-CV
@unnumbered II. Using Guile-CV


@node Configuring Guile for Guile-CV
@section Configuring Guile for Guile-CV

Guile must be modified, with respect to two @code{core} functionalities,
before to start to use Guile-CV: (a) its @code{repl-print} procedure and
(b) its @code{raised exception system}.


@node Configuring Guile's repl-print procedure
@subsection Configuring Guile's repl-print procedure

Guile's @code{repl-print} procedure calls @code{(write val)}, which is
inadequate for images, even very small images@footnote{Even for very
small images, using write is inadequate, in a terminal, and will
definitely kill your Emacs/Geiser session.  Not to mention it will raise
your electricity bill :) - till you succeed to delete its process, Emacs
will use one core at more then 100%, desperately trying to display
hundreds of thousands of floating point values, heating your laptop (if
you have a laptop) up to the point you'll be able to cook an egg on it,
and get its fans crasy... You've been warned :).}. Fortunately, Guile
provides both a simple mechanism to alter the default repl printer and
the alternate repl printer procedure we need: @code{truncated-print}.

To modify the default repl printer, you may alter (or add if it doesn't
exist) your @file{$HOME/.guile} file or, if you are working in a
multi-user environmet, you may alther (or add if it doesn't exist) the
file named @file{init.scm} in the Guile global site directory@footnote{
The Guile global site directory location may be obtained by evaluating
the following expression in a terminal): @code{guile -c "(display
(%global-site-dir))(newline)"}. You need write privileges to add or
modify this file, contact your system administrator if you're not in
charge of the system you are working on.}..

Which ever solution you choose, add the following lines:

@lisp
(use-modules (ice-9 pretty-print)
             (system repl common))

(repl-default-option-set! 'print
                          (lambda (repl obj)
                            (truncated-print obj) (newline)))
@end lisp


@node Configuring Guile's raised exception system
@subsection Configuring Guile's raised exception system

Guile's default raised exception system calls @code{simple-format},
which is inadequate for images, even very small images (see the related
footnote of the previous section, it explains how @samp{inadequate} this
default is for images.

As the Guile core module that needs to be patched has changed from 2.0,
2.2 to 3.0, and still is subject to change any time in the future, we
can't provide a @samp{one patch for all} solution.

Instead, we describe the steps to manually update your local version.
However if you think it is @samp{too much} for you, get in touch with
us, and we will guide you or provide a @samp{ready to use module},
depending on your version of Guile.

The module we need to modify is @code{(ice-9 boot-9)}, so let's first
figure out where it is on your system@footnote{You need write privileges
to modify this module, contact your admin if you're not in charge of the
system you are working on.}, in a guile session, enter the following:

@lisp
(string-append (%package-data-dir) "/" (effective-version))
@result{}
$2 = "/opt3/share/guile/3.0"
@end lisp

The above returned value is an example of course, just proceed with the
value returned by your system. So, the file we need to edit, in our
example, is here:

@example
/opt3/share/guile/3.0/ice-9/boot-9.scm
@end example

Edit the above file and:

@enumerate
@item
Search for the line @code{(define format simple-format)}, and below, add
the following line:

@lisp
(define exception-format simple-format)
@end lisp

@item
Replace all occurences of @code{'(format '} using
@code{'(exception-format '} [note and meticulously respect the presence
of the leading open paren '(' and the trailing space ' ' in both the
search and replace expressions].

Save the file.

@item
Compile the file - in the following lines, substitute @code{/opt3} by
your @code{$prefix} value, @code{3.0} by your guile (effective-version)
as well as @code{$HOME}:

@lisp
cd /opt3/share/guile/3.0/ice-9
guild compile boot-9.scm
@print{}
;;; note: source file /opt3/share/guile/3.0/ice-9/boot-9.scm
;;;       newer than compiled /opt3/lib/guile/3.0/ccache/ice-9/boot-9.go
wrote `$HOME/.cache/guile/ccache/3.0-LE-8-3.A/opt3/share/guile/3.0/ice-9/boot-9.scm.go'
@end lisp

Note that the target (compiled) filename is @file{boot-9.scm.go} - not
@file{boot-9.go}.

@item
Install the compiled file:

@lisp
cp $HOME/.cache/guile/ccache/3.0-LE-8-3.A/opt3/share/guile/3.0/ice-9/boot-9.scm.go \
   /opt3/lib/guile/3.0/ccache/ice-9/boot-9.go
@end lisp
@end enumerate

Finally, last but not least, once the above is completed, add the
following lines to your @file{$HOME/.guile} or, if you are working in a
multi-user environmet, to the file named @file{init.scm} in the
so-called Guile global site directory (the previous subsection lists the
terminal command you need to run to see where that directory is on your
system):

@lisp
(when (defined? 'exception-format)
  (set! exception-format
        (lambda (port fmt . args)
          (for-each (lambda (arg)
                      (truncated-print arg #:port port))
              args))))
@end lisp

Note that the above proposed modification assumes you did perform the
steps recommended in the previous subsection, which means that
@code{(use-modules (ice-9 pretty-print))} is already in there:

You are now ready to use Guile-CV!


@node Images used in Guile-CV's documentation
@section Images used in Guile-CV's documentation

Images used in Guile-CV's documentation are distributed with the source
and installed here:

@example
$prefix/share/doc/guile-cv/images
@end example

Examples using @code{im-load} and @code{im-save} given in this manual,
unless a full pathname is specified, assume that these images are
available from the guile current working directory, see @code{getcwd}
and @code{chdir} in Guile's manual

Our best recommendation, at least to start with, is to create a working
directory, such as @code{mkdir $HOME/guile-cv/images}, for example, and
as you need them, copy the distributed images you are interested in.


@node Starting Guile-CV
@section Starting Guile-CV

@sp 1
@center @sup{_} @sc{Special Note} @sup{_}

Before you start to use Guile-CV, make sure you read and implement the
recommendation made in @ref{Configuring Guile for Guile-CV}

@sp 1
With the previous @ref{Images used in Guile-CV's documentation}
recommendations in mind, open a terminal and:

@lisp
cd ~/guile-cv/images
guile
scheme@@(guile-user)> ,use (cv)
scheme@@(guile-user)> (im-load "sand.tif")
@result{}
$2 = (512 512 1 (#f32(125.0 128.0 124.0 118.0 108.0 75.0 76.0 # …)))
@end lisp

Or if you use @uref{@value{UEMACS}, Emacs} which, coupled with
@uref{@value{UGEISER}, Geiser} absolutely rocks @code{:-)}, then a
typical session becomes:

@lisp
fire Emacs
M-x cd
@print{}
Change default directory: ~/guile-cv/images

M-x run-guile
scheme@@(guile-user)> ,use (cv)
scheme@@(guile-user)> (im-load "sand.tif")
@result{}
$2 = (512 512 1 (#f32(125.0 128.0 124.0 118.0 108.0 75.0 76.0 # …)))
@end lisp

Note that to benefit from Emacs's Tab completion mechanism, while typing
image filenames, Emacs itself must be in that directory, hence the above
first step @code{M-x cd ...}

