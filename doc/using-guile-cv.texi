@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Guile-CV Reference Manual.
@c Copyright (C) 2016 - 2017 Free Software Foundation, Inc.
@c See the file guile-cv.texi for copying conditions.


@node Using Guile-CV
@chapter Using Guile-CV

Guile-CV Reference Manual still is a mock-up: any help is more then
welcome to improve this situation, thanks!


@node Configuring Guile's repl-print procedure
@section Configuring Guile's repl-print procedure

Guile's repl-print procedure _must_ be modified before to start to use
Guile-CV.  The default Guile's repl-print procedure calls (write val),
which is inadequate for images, even very small images@footnote{Even for
very small images, using write is inadequate, in a terminal, and will
definitely kill your Emacs/Geiser session.  Not to mention it will raise
your electricity bill :) - till you succeed to delete its process, Emacs
will use one core at more then 100%, desperately trying to display
hundreds of thousands of floating point values, heating your laptop (if
you have a laptop) up to the point you'll be able to cook an egg on it,
and get its fans crasy... You've been warned :).}.

Unfortunately, Guile does not provide a simple way for its users to
modify its repl-print procedure, so, for now, there is no other way but
'getting your hands dirty' here :), but no big deal either, here are the
steps.

The module we need to modify is @code{(system repl common)}, so let's
first figure out where it is on your system@footnote{You need write
privileges to modify this module, contact your admin if you're not in
charge of the system you are working on.}:

@lisp
guile
...
scheme@@(guile-user)> (string-append (%package-data-dir) "/" (effective-version))
@print{}
$2 = "/opt2/share/guile/2.2"
@end lisp

The above returned value is an example of course, just proceed with the
value returned by your system. So, the file we need to edit, in our
example, is here:

@example
/opt2/share/guile/2.2/system/repl/common.scm
@end example

Edit the above file and:

@enumerate
@item
Add the following module to the list of imported modules:

@lisp
#:use-module (ice-9 pretty-print)
@end lisp

@item
Search for the repl-print definition and, at the end of the procedure
definition, replace:

@lisp
(write val)
@end lisp

by

@lisp
(truncated-print val)
@end lisp
@end enumerate

Save the file of course, and your good to play with Guile-CV.


@node Images used in Guile-CV's documentation
@section Images used in Guile-CV's documentation

All images used in Guile-CV's documentation are distributed with the
source and installed here:

@example
$prefix/share/doc/guile-cv/images
@end example

All examples using @code{im-load} and @code{im-save} given in this
manual, unless a full pathname is specified, assume that these images
are available from the guile current working directory, see
@code{getcwd} and @code{chdir} in Guile's manual

Our best recommendation, at least to start with, is to create a working
directory, such as @code{mkdir $HOME/guile-cv/images}, for example, and
as you need them, copy the distributed images you are interested in.

Having done this, open a terminal and:

@lisp
cd ~/guile-cv/images
guile
scheme@@(guile-user)> ,use (cv)
scheme@@(guile-user)> (im-load "sand.tif")
@print{}
$2 = (512 512 1 (#f32(125.0 128.0 124.0 118.0 108.0 75.0 76.0 # …)))
@end lisp

Or if you use @uref{@value{UEMACS}, Emacs} which, coupled with
@uref{@value{UGEISER}, Geiser} absolutely rocks @code{:-)}, then a
typical session becomes:

@lisp
fire Emacs
M-x cd
@print{}
Change default directory: ~/guile-cv/images

M-x run-guile
scheme@@(guile-user)> ,use (cv)
scheme@@(guile-user)> (im-load "sand.tif")
@print{}
$2 = (512 512 1 (#f32(125.0 128.0 124.0 118.0 108.0 75.0 76.0 # …)))
@end lisp

Note that to benefit from Emacs's Tab completion mechanism, while typing
image filenames, Emacs itself must be in that directory, hence the above
first step @code{M-x cd ...}
