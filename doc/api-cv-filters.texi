@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Guile-CV Reference Manual.
@c Copyright (C) 2016 - 2017 Free Software Foundation, Inc.
@c See the file guile-cv.texi for copying conditions.


@node Filters
@subsection Filters

The Guile-CV procedures and methods to filter images.


@subheading Procedures

@ifhtml
@indentedblock
@table @code
@item @ref{im-gaussian-blur}
@item @ref{im-gaussian-blur-channel}
@item @ref{im-gaussian-gradient}
@item @ref{im-gaussian-gradient-channel}
@item @ref{im-gaussian-sharp}
@item @ref{im-gaussian-sharp-channel}
@item @ref{im-sharpen}
@item @ref{im-sharpen-channel}
@item @ref{im-median-filter}
@item @ref{im-median-filter-channel}
@item @ref{im-convolve}
@item @ref{im-convolve-channel}
@end table
@end indentedblock
@end ifhtml


@anchor{im-gaussian-blur}
@anchor{im-gaussian-blur-channel}
@deffn Procedure im-gaussian-blur image sigma
@deffnx Procedure im-gaussian-blur-channel channel width height sigma
@cindex Gaussian Blur
@cindex Gaussian Smooth

Returns a new image or channel.

The new image or new channel is the result of the computation of the
Gaussian blurring, also known as the Gaussian smoothing, by means of a
convolution of @var{image} or @var{channel} with a 2D Gaussian function,
where @var{sigma} is the standard deviation of the Gaussian
distribution.
@end deffn


@anchor{im-gaussian-gradient}
@anchor{im-gaussian-gradient-channel}
@deffn Procedure im-gaussian-gradient image sigma
@deffnx Procedure im-gaussian-gradient-channel channel width height sigma
@cindex Gaussian Gradient

Returns a new image or channel.

The new image or new channel is the result of the computation of the
strength of the first order partial derivatives by means of a
convolution of @var{image} or @var{channel} with the first order
derivative of a 2D Gaussian function, where @var{sigma} is the standard
deviation of the Gaussian distribution.
@end deffn


@anchor{im-gaussian-sharp}
@anchor{im-gaussian-sharp-channel}
@deffn Procedure im-gaussian-sharp image factor scale
@deffnx Procedure im-gaussian-sharp-channel channel width height factor scale
@cindex Gaussian Sharp

Returns a new image or channel.

The new image or new channel is the result of the computation of the
Gaussian sharpening: the procedure does (a) perform a Gaussian smoothing
at the given @var{scale} to create a temporary image @code{smooth} and
(b) blends @var{image} and @code{smooth} according to the formula
@code{(- (* (+ factor 1) image) (* smooth factor))}.
@end deffn


@anchor{im-sharpen}
@anchor{im-sharpen-channel}
@deffn Procedure im-sharpen image factor
@deffnx Procedure im-sharpen-channel channel width height factor

Returns a new image or channel.

This procedure performs a @samp{simple sharpening} operation on
@var{image}. It actually calls @ref{im-convolve} with the following
kernel:

@lisp
            -1/16  -1/8  -1/16      0  0  0
( * factor  -1/8    3/4  -1/8  ) +  0  1  0
            -1/16  -1/8  -1/16      0  0  0
@end lisp

and uses @code{mirror} as the @samp{out of bound strategy}.
@end deffn


@anchor{im-median-filter}
@anchor{im-median-filter-channel}
@deffn Procedure im-median-filter image w-width w-height
@deffnx Procedure im-median-filter-channel channel width height @
                  w-width w-height
@cindex Median Filter

Returns a new image or channel.

In the new image or channel, each pixel value is the @samp{median} value
of neighboring entries.  The pattern of neighbors is called a
@samp{window}, the size of which is given by @code{w-width} and
@code{w-height}.

Currently, the @samp{out of bound strategy} is fixed and bound to
@samp{zero}, though in the future, we hope to make it a parameter.
@end deffn


@anchor{im-convolve}
@anchor{im-convolve-channel}
@deffn Procedure im-convolve image kernel [#:obs 'repeat]
@deffnx Procedure im-convolve-channel channel width height @
                  kernel k-width k-height [#:obs 'repeat]
@cindex Image Convolution

Returns a new image or channel.

The new image or new channel is the result of the
@uref{@value{UCONVOLUTION}, convolution} of @var{image} using
@var{kernel}.  The @uref{@value{UKERNEL}, kernel} @var{k-width} and
@var{k-height} values can be different, but they must be @code{odd}
numbers, inferior to @var{width} and @var{height} respectively.

The optional keyword argument @var{#:obs} determines the
@samp{out-of-bound strategy}. Valid @var{#:obs} symbols are:

@indentedblock
@table @code
@item avoid
do not operate on pixels upon which (centering) the kernel does not fit
in the image
@item clip
clip the kernel when operating on pixels upon which (centering) the
kernel does not fit in the image (this is only useful if the kernel is
>= 0 everywhere)
@item repeat
repeat the nearest pixels
@item mirror
mirror the nearest pixels
@item wrap
wrap image around (periodic boundary conditions)
@item zero
assume out-of-bound pixel values is @code{0.0}
@end table
@end indentedblock

Kernel data structure, accessors, procedures and predefined kernels are
all described in this node of the Guile-CV manual:
@ref{Kernel Structure and Accessors}.

@end deffn
