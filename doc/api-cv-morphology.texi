@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Guile-CV Reference Manual.
@c Copyright (C) 2016 - 2017 Free Software Foundation, Inc.
@c See the file guile-cv.texi for copying conditions.


@node Morphology
@subsection Morphology

The Guile-CV procedures and methods related to morphology.

@subheading Procedures

@ifhtml
@indentedblock
@table @code
@item @ref{im-disc-erode}
@item @ref{im-disc-erode-channel}
@item @ref{im-disc-dilate}
@item @ref{im-disc-dilate-channel}
@item @ref{im-open}
@item @ref{im-open-channel}
@item @ref{im-close}
@item @ref{im-close-channel}
@item @ref{im-fill-holes}
@item @ref{im-fill-holes-channel}
@item @ref{im-delineate}
@item @ref{im-delineate-channel}
@item @ref{im-distance-map}
@item @ref{im-distance-map-channel}
@end table
@end indentedblock
@end ifhtml


@anchor{im-disc-erode}
@anchor{im-disc-erode-channel}
@deffn Procedure im-disc-erode image radius
@deffnx Procedure im-disc-erode-channel channel width height radius

Returns a new image or channel.

Performs the morpholgical erosion of @var{image} using a disc of a given
@var{radius}. Here is an example:

@lisp
(im-make 5 5 1 1.0)
@print{}
$2 = (5 5 1 (#f32(1.0 1.0 1.0 1.0 1.0 …)))
(im-set! $2 1 2 0.0)
(im-disc-erode $2 1)
@print{}
$3 = (5 5 1 (#f32(1.0 0.0 0.0 0.0 1.0 …)))
(im-display $2 #:proc inexact->exact)
@print{}
Channel 1
  1  1  1  1  1
  1  1  0  1  1
  1  1  1  1  1
  1  1  1  1  1
  1  1  1  1  1
(im-display $3 #:proc inexact->exact)
@print{}
Channel 1
  1  0  0  0  1
  1  0  0  0  1
  1  0  0  0  1
  1  1  1  1  1
  1  1  1  1  1
@end lisp
@end deffn


@anchor{im-disc-dilate}
@anchor{im-disc-dilate-channel}
@deffn Procedure im-disc-dilate image radius
@deffnx Procedure im-disc-dilate-channel channel width height radius

Returns a new image or channel.

Performs the morpholgical dilation of @var{image} using a disc of a
given @var{radius}. Here is an example:

@lisp
...
@print{}
$13 = (11 11 1 (#f32(0.0 0.0 0.0 0.0 0.0 …)))
(im-disc-dilate $13 1)
@print{}
$14 = (11 11 1 (#f32(1.0 1.0 1.0 1.0 1.0 …)))
(im-display $13 #:proc inexact->exact)
@print{}
Channel 1
  0  0  0  0  0  0  0  0  0  0  0
  0  1  1  1  1  0  0  1  1  1  0
  0  1  1  1  1  0  0  1  1  1  0
  0  1  1  1  1  1  1  1  1  1  0
  0  1  1  1  1  1  1  1  1  1  0
  0  1  1  0  0  0  1  1  1  1  0
  0  1  1  0  0  0  1  1  1  1  0
  0  1  1  0  0  0  1  1  1  1  0
  0  1  1  1  1  1  1  1  0  0  0
  0  1  1  1  1  1  1  1  0  0  0
  0  0  0  0  0  0  0  0  0  0  0
(im-display $14 #:proc inexact->exact)
@print{}
Channel 1
  1  1  1  1  1  1  1  1  1  1  1
  1  1  1  1  1  1  1  1  1  1  1
  1  1  1  1  1  1  1  1  1  1  1
  1  1  1  1  1  1  1  1  1  1  1
  1  1  1  1  1  1  1  1  1  1  1
  1  1  1  1  1  1  1  1  1  1  1
  1  1  1  1  0  1  1  1  1  1  1
  1  1  1  1  1  1  1  1  1  1  1
  1  1  1  1  1  1  1  1  1  1  1
  1  1  1  1  1  1  1  1  1  0  0
  1  1  1  1  1  1  1  1  1  0  0
@end lisp
@end deffn


@anchor{im-open}
@anchor{im-open-channel}
@deffn Procedure im-open image radius
@deffnx Procedure im-open-channel channel width height radius

Returns a new image or channel.

Performs the dilation of the erosion of @var{image} using
@var{radius}. Opening removes small objects.
@end deffn


@anchor{im-close}
@anchor{im-close-channel}
@deffn Procedure im-close image radius
@deffnx Procedure im-close-channel channel width height radius

Returns a new image or channel.

Performs the erosion of the dilation of @var{image} using
@var{radius}. Closing removes small holes.
@end deffn


@anchor{im-fill-holes}
@anchor{im-fill-holes-channel}
@deffn Procedure im-fill-holes image
@deffnx Procedure im-fill-holes-channel channel width height

Returns a new image or channel.

The argument must be a BINARY @var{image}. As its name indicate, this
procedure fill the holes of all and every objects in the image.
@end deffn


@anchor{im-delineate}
@anchor{im-delineate-channel}
@deffn Procedure im-delineate image @
       [#:threshold 10] [#:radius 2]
@deffnx Procedure im-delineate-channel channel width height @
       [#:threshold 10] [#:radius 2]
@cindex Edge Enhancement

Returns a new image or channel.

Also known as @samp{Edge Enhancement}, this procedure performs the
delineation of @var{image}, obtained by applying the following pseudo
code algorithm:

@lisp
;; with
;;   Min = (im-disc-erode image radius)
;;   Max = (im-disc-dilate image radius)
D = Max - Min
If D < threshold
  ;; not an edge
  output pixel = input pixel
  ;; it is an edge
  If (pixel – Min) < (Max – pixel)
    output pixel = Min
    output pixel = Max
@end lisp

@ifnottex
@image{images/sinter,,,sinter,png}
@image{images/sinter-delin-t10-r2,,,sinter-delin-t10-r2,png}
@image{images/sinter-delin-t25-r5,,,sinter-delin-t25-r5,png}
@end ifnottex

Here above, left being the original image - a small part of an optical
microscope capture of a sinter sample - you can see the difference
between @code{im-delineate} called with the default @var{threshold} and
@var{radius} values, then called using @code{#:threshold 25} and
@code{#:radius 5}.
@end deffn


@anchor{im-distance-map}
@anchor{im-distance-map-channel}
@deffn Procedure im-distance-map image @
       [#:bg 'black] [#:mode 'euclidean]
@deffnx Procedure im-distance-map-channel channel width height @
       [#:bg 'black] [#:mode 'euclidean]
@cindex Distance Transform

Returns a new image or channel.

Also know as @samp{Distance Tranform}, this procedure performs the
distance map of @var{image}, which consist of, for each background
pixel, calculating its distance to the nearest object or contour. In the
return new image or channel, all background pixels will be assigned the
their distance value, all other pixels will be assigned to 0. Distances
larger than 255 are labelled as 255.

The default backgroung pixel value is @code{'black}, the optional
@var{#:bg} keyword argument also accepts @code{'white}.

The default distance map mode is @uref{@value{UEUCLIDEAN},
'euclidean}. Other valid optional @var{#:mode} keyword argument are
@uref{@value{UCHESSBOARD}, 'chessboard} and @uref{@value{UMANHATTAN},
'manhattan}.

@ifnottex
@image{images/t-cells,,,t-cells,png}
@image{images/t-cells-edm,,,t-cells-edm,png}
@image{images/t-cells-mdm,,,t-cells-mdm,png}
@image{images/t-cells-cdm,,,t-cells-cdm,png}
@end ifnottex

Here above, left being the original image - a few cells - you can see
the results obtained by calling @code{im-distance-map} using respectively
the @code{'euclidean}, @code{'manhattan} and @code{'chessboard} modes.
@end deffn
