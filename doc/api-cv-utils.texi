@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Guile-CV Reference Manual.
@c Copyright (C) 2016 - 2017 Free Software Foundation, Inc.
@c See the file guile-cv.texi for copying conditions.


@node Utilities
@subsection Utilities

Other Guile-CV procedures and methods utilities.


@subheading Procedures


@ifhtml
@indentedblock
@table @code
@item @ref{im-compose}
@item @ref{im-compose-channels}
@item @ref{im-display}
@item @ref{im-display-channel}
@item @ref{im-histogram}
@item @ref{im-show}
@end table
@end indentedblock
@end ifhtml


@anchor{im-compose}
@anchor{im-compose-channels}
@deffn Procedure im-compose position alignment @
       [#:color '(0 0 0)] img-1 img-2 @dots{}
@deffnx Procedure im-compose-channels @
                  position alignment channels widths heights @
                  [#:value '0.0]

Returns a new image or a new channel.

The valid @var{position} and @var{alignment} symbols are:
@indentedblock
@table @code
@item left right
@code{top center bottom}
@item above below
@code{left center right}
@end table
@end indentedblock

When used, the optional @var{#:color} keyword argument must come after
the mandatory @var{alignment} argument and precede @var{img-1},
otherwise Guile will raise an exception. For RGB images, it is the
color used to padd images passed in argument that are inferior, in
width or height (depending on the position), to the biggest of them. For
GRAY images, the @var{#:color} is reduced to its corresponding gray
@code{value}:

@lisp
@code{(/ (reduce + 0 color) 3)}
@end lisp

For the @code{im-compose-channels} procedure, the list of
@var{channels}, @var{widths} and @var{heights} must be of equal length
and equally ordered, so the @code{nth} element of @var{widths} and
@var{heights} are the @code{width} and @code{height} of the @code{nth}
element of @var{channels}. The optional @code{#:value} keyword argument
is used to padd @var{channels} that are inferior, in width or height
(depending on the position), to the biggest of them.
@end deffn


@anchor{im-display}
@anchor{im-display-channel}
@deffn Procedure im-display image @
       [#:proc identity] [#:port (current-output-port)]
@deffnx Procedure im-display-channel channel width height @
        [#:proc identity] [#:port (current-output-port)]

Returns nothing.

Displays the content of @var{image} or @var{channel} on @var{port},
applying @var{proc} to each pixel value.

@lisp
...
$5 = (3 2 3 (#f32(0.0 1.0 2.0 3.0 4.0 5.0) ... ...)
(im-display $5 #:proc inexact->exact)
@print{}
Channel 1
  0  1  2
  3  4  5
Channel 2
  6  7  8
  9  10  11
Channel 3
  12  13  14
  15  16  17
@end lisp

Caution: unless you specify @var{port}, both this and
@ref{im-display-channel} procedures are ment to be used on very small
and testing images, otherwise even on a small image, it might be ok in a
terminal, but it will definitely will kill your emacs.
@end deffn


@anchor{im-histogram}
@deffn Procedure im-histogram image @
       [#:subtitle @quotedblleft{}Untitled@quotedblright{}]

Returns two values: (1) an image; (2) a list (or a list of list) of
significant values for @var{image}: one list if @var{image} is GRAY, a
list of list of values per channel if @var{image} is RGB.

The returned image is composed of a header (title, @var{#:subtitle}),
either the GRAY or the RGB channel histogram(s) for @var{image} and a
footer, which is a table containg, for each channel, the following
values: @code{mean}, @code{standard deviation}, @code{minimum},
@code{maximum}, the @code{mode}@footnote{The mode is the integer
corresponding to the histogram entry that received the maximum of hits,
and the value displayed in parens precisely is the number of hits.}
followed by its @code{value}.

Here below, the call sequence and the histogram for the GRAY image
@file{sinter.png} given along with Guile-CV documentation and examples:

@lisp
scheme@@(guile-user)> (im-load "sinter.png")
$32 = (212 128 1 (#f32(25.0 39.0 50.0 52.0 51.0 45.0 # …)))
scheme@@(guile-user)> (im-histogram $32 #:subtitle "sinter.png")
$34 = (282 271 1 (#f32(255.0 255.0 255.0 255.0 255.0 # …)))
$35 = (27136 163.346 75.081 0 243 215 727)
@end lisp

@ifnottex
@indentedblock
@image{images/sinter-histogram,,,sinter-histogram,png}
@end indentedblock
@end ifnottex

Note that histogram images returned by @code{im-histogram} have no
borders, the above histogram has been padded - using @code{(im-padd $34
1 1 1 1 #:color '(96 96 96))} - for better readability, otherwise the
title above and the table below would look as if they were not
centered.
@end deffn

@anchor{im-show}
@deffn Method im-show filename
@deffnx Method im-show image
@deffnx Method im-show image name

Returns the string "#<Image: @dots{}>", where "@dots{}" is
either @var{filename} or a filename constructed by im-show, see below.

These three methods will also effectively dislay the image if you are
using @uref{@value{UGEISER}, Geiser}, which analyzes Guile's procedures
and methods returned values (through the use of its pattern matcher),
and when appropriate, triggers its image display mechanism.

Geiser has two variables that allow you to choose either to inline
images in its @uref{@value{UEMACS}, Emacs} (Guile repl) buffer, or to
display them using externel viewer: @code{geiser-image-viewer} and
@code{geiser-repl-inline-images-p}.  You may choose to add these
variables in your @file{.emacs} file, for example:

@example
(setq geiser-image-viewer "eog")
(setq geiser-repl-inline-images-p nil)
@end example

Note that @code{(setq geiser-repl-inline-images-p t)} will only work if
you are using a graphics-aware Emacs, and otherwise, will fall on the
external viewer approach, if the variable @code{geiser-image-viewer} has
been defined. When using Geiser in a non graphics-aware Emac, or when
using the external viewer approach, images will appear as buttons: press
return on them to invoke (or raise) the external viewer (window
containing that image).

Except for the first @code{im-show} method, Guile-CV has to save the
@var{image} first, and does it in the location defined by the
@ref{%image-cache} variable. If you call @code{im-show} passing
@var{name}, the @var{image} is saved as
@file{%image-cache/@var{name}.png}, otherwise under a generated name,
the result of @code{(symbol->string (gensym "im-show-"))}.

Note that if you do not specify @var{name}, a new external viewer window
is opened at each @code{im-show} invocation, even for identical
@var{image} calls: this because in Guile-CV, on purpose, images are just
list, with no (unique) identifier, and there is no way for
@code{im-show} to know ... Further to this point, when you pass
@var{name} as an argument, you are not @samp{identifying} @var{image},
which may actually differ, but rather just ask to reuse the filename and
hence the external viewer window associated with it.

Last note: many external viewers, such as Eog (the Gnome Eye Viewer),
will try to apply, per default, some sort of smoothing techniques,
especially on @code{zoom-in} and @code{zoom-out}: where this is fine for
viewing @samp{lazer} pictures, you probably want to check and disable
these options when working with Guile-CV.
@end deffn


@subheading Variables

@ifhtml
@indentedblock
@table @code
@item @ref{%image-cache}
@item @ref{%image-cache-format}
@end table
@end indentedblock
@end ifhtml


@anchor{%image-cache}
@defvr Variable %image-cache
@cindex User configuration

Specifies the location used by @ref{im-show} to save images. 

The default value is @file{/tmp/<username>/guile-cv}, but you may
@code{set!} it.  If you'd like to reuse that location for future
guile-cv sessions, you may save it in guile-cv's @samp{per user} config
file @file{<userdir>/.config/guile-cv} as an assoc pair, here is an
example:

@example
cat ~/.config/guile-cv.conf
((image-cache . "~/tmp"))
@end example

Note that if used, the @samp{~} is expanded at load time, so in geiser,
it becomes:

@example
scheme@@(guile-user)> ,use (cv)
scheme@@(guile-user)> %image-cache
@print{}
$2 = "/home/david/tmp"
@end example
@end defvr


@anchor{%image-cache-format}
@defvr Variable %image-cache-format

Specifies the format used by @ref{im-show} to save images. 

The default value is @code{"png"}, but you may @code{set!} it.  If you'd
like to reuse that format for future guile-cv sessions, you may save
it in guile-cv's @samp{per user} config file
@file{<userdir>/.config/guile-cv}, as an assoc pair, here is an
example:

@example
cat ~/.config/guile-cv.conf
((image-cache-format . "jpg"))
@end example
@end defvr
