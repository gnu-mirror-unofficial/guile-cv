@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Guile-CV Reference Manual.
@c Copyright (C) 2016 - 2017 Free Software Foundation, Inc.
@c See the file guile-cv.texi for copying conditions.


@node Kernel Structure and Accessors
@subsection Kernel Structure and Accessors

The Guile-CV procedures and methods related to kernels data structure,
creating and accessing kernels.


@subheading Kernel Data Structure

A Guile-CV @uref{@value{UKERNEL}, kernel} is represented by a list
containing the following elements:

@lisp
(@var{width} @var{height} @var{kdata})
@end lisp

where @var{kdata} is a vector of @code{(* @var{width} @var{height})}
cells. More precisely, @var{kdata} is an @code{srfi-4} homogeneous
numeric vector of 64 bit floats, called @code{f64vector}, knowing that
@code{f64} is the C type @code{double}.

The external representation (ie. read syntax) for @var{kdata} vectors is
@code{#f64(@dots{})}. As an example, the @code{identity} kernel of width
3 and height 3, initialized to 0.0 is represented by the following
expression:

@lisp
(3 3 #f64(0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0))
@end lisp

The kernel @var{width} and @var{height} can be different (kernels can be
rectangular), but both @var{width} and @var{height} must be odd values.

Guile-CV provides useful accessors for kernel fields, however, if you
need them all, just like for accessing image fields, your best friend is
@code{(ice-9 match)}, here is an example:

@lisp
,use (cv)
(match kernel
  ((width height kdata)
   ... your code here ...))
@end lisp

Note that the @code{(cv)} module imports and re-exports, among may
others, the public interface of @code{(ice-9 match)}.

Guile-CV defines a few useful kernels, see @ref{kernel variables} at
the end of this section, that you both may want to use and reuse: it
will be easier, if you need to do so, to define your own kernels reusing
an existing one, see the @code{(cv kdata)} module.


@subheading Procedures

@ifhtml
@indentedblock
@table @code
@item @ref{k-make}
@item @ref{k-make-circular-mask}

@item @ref{k-width}
@item @ref{k-height}
@item @ref{k-size}
@item @ref{k-channel}

@item @ref{kernel?}

@item @ref{k-ref}
@item @ref{k-fast-ref}
@item @ref{k-set!}
@item @ref{k-fast-set!}

@item @ref{k-offset}
@item @ref{k-fast-offset}

@item @ref{k-display}
@end table
@end indentedblock
@end ifhtml


@anchor{k-make}
@deffn Procedure k-make width height [values #f] [norm #f]

Returns a new kernel.

The @code{kdata} value of this new kernel is an srfi-4 homogeneous
numeric vector of 64 bit floats, @code{f64vector}, composed of
@var{width} by @var{height} cells.

The optional @var{values} argument can be:

@indentedblock
@table @code
@item #f
@code{kdata} is initialized to the @samp{identity} kernel (all zeros
except the center of the kernel, initialzed to 1)

@item a single value
all @code{kdata} cells are initialized using that single value

@item a list of values
a list of @var{width} by @var{height} values, used to initialzed
@code{kdata}, in the order they are given
@end table
@end indentedblock

The optional @var{norm} argument can be:

@indentedblock
@table @code
@item #f
in this case, @code{kdata} is not normalized

@item #t
unless @var{values} would be @code{#f}, @code{kdata} is normalized using
@code{(reduce + 0 values)}

@item a single value
all @code{kdata} cells are normalized using that value, which must be a
number different from @code{0}
@end table
@end indentedblock

When both @var{values} and @var{norm} are passed - which is mandatory if
you want to pass @var{norm} (since these are optional arguments, as
opposed to keyword arguments) - @var{values} must precede @var{norm} on
the arguments list.

As an example, here is how to define a @code {3 x 3} normalized mean
kernel:

@lisp
,use (cv)
(k-make 3 3 1 #t)
@print{}
$2 = (3 3 #f64(0.1111111111111111 0.1111111111111111  # # # # …))
(k-display $2)
@print{}

    0.11111    0.11111    0.11111
    0.11111    0.11111    0.11111
    0.11111    0.11111    0.11111
@end lisp
@end deffn


@anchor{k-make-circular-mask}
@deffn Procedure k-make-circular-mask radius [value 1] [norm #f]

Returns a new @code{circular mask} kernel.

The @code{kdata} value of this new kernel is an srfi-4 homogeneous
numeric vector of 64 bit floats, @code{f64vector}, composed of
@var{width} by @var{height} cells where @var{width} and @var{height} are
@code{equal} and @code{odd} values determined by the procedure.

The mandatory @code{radius} argument must be a floating point number
satisfying the following predicate: @code{(float>=? radius 0.5)}.

The optional @var{norm} argument can be:

@indentedblock
@table @code
@item #f
in this case, @code{kdata} is not normalized

@item #t
@code{kdata} values are normalized using @code{(* n value)}, where
@code{n} is the number of non zero elements of the circular kernel mask
being defined.
@end table
@end indentedblock

When both @var{value} and @var{norm} are passed - which is mandatory if
you want to pass @var{norm} (since these are optional arguments, as
opposed to optional keyword arguments) - @var{value} must precede
@var{norm} on the arguments list.

To illustrate, here are the circular kernel masks of @var{radius 0.5},
@code{1}, @code{1.5} respectively:

@lisp
...
(for-each (lambda (i)
            (k-display (k-make-circular-mask i)
                       #:proc float->int))
  '(0.5 1.0 1.5))
@print{}

  0  1  0
  1  1  1
  0  1  0


  1  1  1
  1  1  1
  1  1  1


  0  0  1  0  0
  0  1  1  1  0
  1  1  1  1  1
  0  1  1  1  0
  0  0  1  0  0
@end lisp

To better illustrate, let's define a bigger circular kernel mask,
transform it to an image and @ref{im-show} it:

@lisp
...
(match (k-make-circular-mask 49)
  ((w h kdata) (list w h 1 (list (f64vector->f32vector kdata)))))
  @print{}
$6 = (99 99 1 (#f32(0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 # …)))
(im-show $6 'scale)
@end lisp

And you should see the following image@footnote{The @code{'scale}
optional argument passed to @ref{im-show}, as its name indicate, is so
that kernel values will be scaled, which in this case means that
@code{1.0} values will become @code{255.0} - otherwise, it would be
almost impossible for a human eye to actually see the shape of the
circle @dots{}}

@ifnottex
@indentedblock
@image{images/circular-kernel-mask-49,,,circular-kernel-mask-49,,,circular-kernel-mask-49,png}
@end indentedblock
@end ifnottex
@end deffn


@anchor{k-width}
@anchor{k-height}
@anchor{k-size}
@anchor{k-channel}
@deffn Procedure k-width kernel
@deffnx Procedure k-height kernel
@deffnx Procedure k-size kernel
@deffnx Procedure k-channel kernel

Returns, respectively, the @var{width}, the @var{height}, the list of
@var{width} and @var{height} or the @var{kdata} for @var{kernel}.
@end deffn


@anchor{kernel?}
@deffn Procedure kernel? kernel

Returns @code{#t} if @var{kernel} is a Guile-CV kernel.
@end deffn


@anchor{k-ref}
@anchor{k-fast-ref}
@deffn Procedure k-ref kernel i j
@deffnx Procedure k-fast-ref kernel i j

Returns the value stored at position @var{i} and @var{j} of the
@var{kernel}.

@var{k-fast-ref} does not check the validity of its arguments: use it
at your own risk.
@end deffn


@anchor{k-set!}
@anchor{k-fast-set!}
@deffn Procedure k-set! kernel i j value
@deffnx Procedure k-fast-set! kernel i j value

Returns nothing.

Sets the value stored at position @var{i} and @var{j} of the
@var{kernel} to @var{value}.

@var{k-fast-set!} does not check the validity of its arguments: use it
at your own risk.
@end deffn


@anchor{k-offset}
@anchor{k-fast-offset}
@deffn Procedure k-offset i j width height
@deffnx Procedure k-fast-offset i j width

Returns the kernel offset for the @var{i} and @var{j} indices, based on
the @var{width} and @var{height} of the kernel.

This procedure converts the matrix indices @var{i} and @var{j} to a
vector offset for a kernel of size @var{width} and @var{height}.

@var{k-fast-offset} does not check the validity of its arguments: use it
at your own risk.
@end deffn


@anchor{k-display}
@deffn Procedure k-display image @
       [#:proc #f] [#:port (current-output-port)]

Returns nothing.

Displays the content of @var{kernel} on @var{port}, applying @var{proc}
to each kernel value.

@lisp
,use (cv)
(k-display %k-laplacian)
@print{}
    0.37500    0.25000    0.37500
    0.25000   -2.50000    0.25000
    0.37500    0.25000    0.37500
@end lisp
@end deffn

@anchor{kernel variables}
@subheading Variables

@ifhtml
@indentedblock
@table @code
@item @ref{%k-identity}
@item @ref{%k-edge0}
@item @ref{%k-edge1}
@item @ref{%k-sharpen}
@item @ref{%k-mean}
@item @ref{%k-gaussian-blur0}
@item @ref{%k-gaussian-blur1}
@item @ref{%k-unsharp}
@item @ref{%k-emboss}
@item @ref{%k-laplacian}
@item @ref{%k-prewitt-y}
@item @ref{%k-prewitt-x}
@item @ref{%k-sobel-y}
@item @ref{%k-sobel-x}
@end table
@end indentedblock
@end ifhtml

Notes: (a) the following kernels are merely offered as @samp{didactic}
examples, some of these were used @samp{in the old days}, but in most
cases, you will find and prefer to use a @samp{specific} and
@samp{modern} procedure that will give (much) better results, such as,
@ref{im-gaussian-blur}, @ref{im-gaussian-sharp}, @ref{im-sharpen} (a
simple sharpening procedure), @ref{im-canny} (edge detection) ... and
(b) in order to make these definitions easier to read, we've added some
spaces and newlines.


@anchor{%k-identity}
@defvr Variable %k-identity

@lisp
(k-display %k-identity #:proc float->int)
@print{}
  0  0  0
  0  1  0
  0  0  0
@end lisp
@end defvr


@anchor{%k-edge0}
@defvr Variable %k-edge0

@lisp
(k-make 3 3
        '(  1  0 -1
            0  0  0
           -1  0  1  ))
@end lisp
@end defvr


@anchor{%k-edge1}
@defvr Variable %k-edge1

@lisp
(k-make 3 3
        '(  0  1  0
            1 -4  1
            0  1  0  ))
@end lisp
@end defvr


@anchor{%k-sharpen}
@defvr Variable %k-sharpen

@lisp
(k-make 3 3
        '( -1  -1  -1
           -1   9  -1
           -1  -1  -1  ))
@end lisp
@end defvr


@anchor{%k-mean}
@defvr Variable %k-mean

@lisp
(k-make 3 3
        '(  1  1  1
            1  1  1
            1  1  1  )
        9)
@end lisp
@end defvr


@anchor{%k-gaussian-blur0}
@defvr Variable %k-gaussian-blur0

@c The use of @ref{im-convolve} with this and the following kernels will
@c only give an approximation of the real Gaussian bluring algorithm.  For
@c any serious work, use @ref{im-gaussian-blur} instead.

@lisp
(k-make 3 3
        '(  1  2  1
            2  4  2
            1  2  1  )
        16)
@end lisp
@end defvr


@anchor{%k-gaussian-blur1}
@defvr Variable %k-gaussian-blur1

@lisp
(k-make 5 5
        '(  1   4   6   4  1
            4  16  24  16  4
            6  24  36  24  6
            4  16  24  16  4
            1   4   6   4  1  )
        256)
@end lisp
@end defvr


@anchor{%k-unsharp}
@defvr Variable %k-unsharp

@lisp
(k-make 5 5
        '(  1   4    6   4  1
            4  16   24  16  4
            6  24 -476  24  6
            4  16   24  16  4
            1   4    6   4  1  )
        -256)
@end lisp
@end defvr


@anchor{%k-emboss}
@defvr Variable %k-emboss

Also called @code{%k-compass} or @code{%k-directional}, this kind of
filter is useful to enhance edges in given directions. With a @code{3 x
3} kernel, one normally uses filters for @code{0}, @code{45}, @code{90}
and @code{135} degrees. The various angles are obtained @samp{rotating}
the positive and negative values to @samp{align} with the various
directions.

@lisp
(k-make 3 3
        '(  -2  -2   0
            -2   6   0
             0   0   0  ))
@end lisp
@end defvr


@anchor{%k-laplacian}
@defvr Variable %k-laplacian

This is a variation of the more traditional Laplacian kernels, that are
meant to enhance edges, in this case in an isotropic fashion
(non-directional). This the implementation in the Vigra code and it
atributes large weights to the diagonal pixels of the
kernel. Nevertheless, the total weight is zero.

@lisp
(k-make 3 3
        '(  0.375   0.25  0.375
            0.25   -2.5   0.25
            0.375   0.25  0.375  ))
@end lisp
@end defvr


@subheading Prewitt filtering

@anchor{%k-prewitt-y}
@defvr Variable %k-prewitt-y

A 3 x 3 kernel which emphasizes horizontal edges by approximating a
vertical gradient.

@lisp
(k-make 3 3
        '(  1   1   1
            0   0   0
           -1  -1  -1  ))
@end lisp
@end defvr


@anchor{%k-prewitt-x}
@defvr Variable %k-prewitt-x

A 3 x 3 kernel which emphasizes vertical edges by approximating an
horizontal gradient.

@lisp
(k-make 3 3
        '(  1  0  -1
            1  0  -1
            1  0  -1  ))
@end lisp
@end defvr

@subheading Sobel filtering

Filtering an image using a @samp{Sobel filter} requires a three steps
approach: (1) filtering the image using the @samp{Sobel y filter},
(2) dito using the @samp{Sobel x filter}, and (3) combining the
results to obtain @samp{Sobel magnitude}: @code{(sqrt (+ (sqrt sobel-y)
(sqrt sobel-x))}.

@c Guile-CV @code{im-flter} provides a @code{'sobel} filter of course, but
@c here are the definition of the @samp{Sobel column} and @samp{Sobel line}
@c filters, should you need these individually.

@anchor{%k-sobel-y}
@defvr Variable %k-sobel-y

@lisp
(k-make 3 3
        '(  1   2   1
            0   0   0
           -1  -2  -1  ))
@end lisp
@end defvr


@anchor{%k-sobel-x}
@defvr Variable %k-sobel-x

@lisp
(k-make 3 3
        '(  1   0  -1
            2   0  -2
            1   0  -1  ))
@end lisp
@end defvr
